version: '3.8'

services:
  # Main API service
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "8000:8000"
    environment:
      - LOG_LEVEL=INFO
      - MODEL_PATH=/app/model
      - API_VERSION=v1
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - ml-network

  # Development service with hot reload
  api-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "8001:8000"
    environment:
      - LOG_LEVEL=DEBUG
      - MODEL_PATH=/app/model
      - API_VERSION=v1
    volumes:
      - .:/app
      - ./logs:/app/logs
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    networks:
      - ml-network
    profiles:
      - dev

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api
    networks:
      - ml-network
    profiles:
      - production

  # Redis for caching (optional enhancement)
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ml-network
    profiles:
      - production

  # Monitoring with Prometheus (optional enhancement)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - ml-network
    profiles:
      - monitoring

  # Grafana for visualization (optional enhancement)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - ml-network
    profiles:
      - monitoring

networks:
  ml-network:
    driver: bridge

volumes:
  redis_data:
  prometheus_data:
  grafana_data:
